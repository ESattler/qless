{"version":3,"sources":["utils.js","GameState.js","constants.js","components/Tile.js","components/BoardSquare.js","components/TileBenchSquare.js","components/TileBench.js","components/GameArea.js","views/GameView.js","App.js","index.js"],"names":["Array","prototype","swap","a","b","this","length","temp","range","n","from","x","i","matrix","y","rows","columns","map","row","slice","letters","observers","emitChange","id","observe","o","tile","moveTile","toX","toY","item","resetTile","newTile","getRandomInt","max","Math","floor","random","generateRandomLetters","charAt","getNeighbors","allTiles","upNeighbor","downNeighbor","rightNeighbor","leftNeighbor","forEach","tempTile","getWordDown","down","letter","getWordRight","right","getAllWords","words","console","log","up","left","word","push","ItemTypes","Tile","props","useDrag","type","collect","monitor","isDragging","drag","useDrop","accept","drop","fromID","toID","fromX","fromY","swapTile","isOver","styles","top","zIndex","className","style","ref","node","BoardSquare","canDrop","classes","classNames","TileBenchSquare","TileBench","rowIndex","index","tiles","renderBoardSquares","React","Component","GameArea","GameView","useState","tile1","setTile1","useEffect","newPos","tile2","setTile2","tile3","setTile3","tile4","setTile4","tile5","setTile5","tile6","setTile6","tile7","setTile7","tile8","setTile8","tile9","setTile9","tile10","setTile10","tile11","setTile11","tile12","setTile12","setTiles","foundWords","setFoundWords","foundWordsDivs","ListItem","ListItemText","ListItemIcon","valid","color","onClick","newLetters","randomize","Object","values","some","alert","checkedWords","Words","hasOwnProperty","validate","Typography","variant","gutterBottom","List","App","DndProvider","backend","HTML5Backend","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b3d190f5.chunk.js","sourcesContent":["/**\n * Array.prototype.swap\n * Rearrange an array to swap the positions of two elements.\n * @param {Number} a - the index of the first element to swap.\n * @param {Number} b - the index of the second element to swap.\n * @returns {Array}\n * @example\n * // returns [ 'a', 'c', 'b' ]\n * [ 'a', 'b', 'c' ].swap(1, 2)\n */\n Array.prototype.swap = function (a, b) {\n  if ( b >= this.length || b < 0 ) return this;\n\n  // Temporary variable to hold data while we juggle\n  let temp = this[a];\n  this[a] = this[b];\n  this[b] = temp;\n  return this;\n};\n\n/**\n * Array.range\n * Create a new array of length n, where the elements are numbers\n * from 0 to n - 1.\n * @param {Number} n - the desired length of the range.\n * @returns {Array}\n * @example\n * // returns [ 0, 1, 2, 3 ]\n * Array.range(4);\n */\nArray.range = n => Array.from(new Array(n), (x,i) => i);\n\n/**\n * Array.matrix\n * Create a new two-dimensional array, where each element is its own index.\n * @param {Number} x - the desired number of columns (possible x values)\n * @param {Number} y - the desired number of rows (possible y values)\n * @returns {Array}\n * @example\n * // returns [\n * //   [ 0, 1, 2 ],\n * //   [ 0, 1, 2 ]\n * // ]\n * Array.matrix(3, 2);\n */\nArray.matrix = (x, y) => {\n  const rows = Array.range(y);\n  const columns = Array.range(x);\n  return rows.map( (row, i) => columns.slice() );\n}","const letters = {}\n\nlet observers = {};\n\nfunction emitChange() {\n  for (let id in observers) {\n    observers[id]({...letters[id]})\n  }\n}\n\nexport function observe(o, tile) {\n  observers[tile.id] = o\n  letters[tile.id] = tile\n}\n\nexport function moveTile(toX, toY, item) {\n  letters[item.id] = {\n    ...letters[item.id],\n    x: toX,\n    y: toY,\n  }\n  emitChange();\n}\n\nexport function swapTile(fromID, toID) {\n  let fromX = letters[fromID].x;\n  let fromY = letters[fromID].y;\n\n  let toX = letters[toID].x;\n  let toY = letters[toID].y;\n\n  letters[fromID] = {\n    ...letters[fromID],\n    x: toX,\n    y: toY\n  }\n\n  letters[toID] = {\n    ...letters[toID],\n    x: fromX,\n    y: fromY\n  }\n  emitChange()\n}\n\nexport function canDropTile(squareX, squareY, item) {\n  let allStartingSpot = Object.values(letters).every(tile => tile.y === 0)\n\n  let nextToExistingLetter = false\n  Object.values(letters).forEach(tile => {\n    if (tile.y !== 0 && tile.id !== item.id && ((Math.abs(tile.x - squareX) === 1 &&  Math.abs(tile.y - squareY) === 0) || (Math.abs(tile.y - squareY) === 1 && Math.abs(tile.x - squareX) === 0))) {\n      nextToExistingLetter = true\n    }\n  })\n\n\n  let [tile, up, down, left, right] = getNeighborsById(Object.values(letters), item.id);\n  let connectingPiece = (((up && down) || (left && right)) && tile.y !== 0);\n\n  return (allStartingSpot || nextToExistingLetter) && !connectingPiece\n}\n\nexport function resetTile(id, newTile) {\n    letters[id] = {\n      ...newTile\n    };\n}\n\n/*\n  GENERATE RANDOM LETTERS\n*/\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nexport function generateRandomLetters() {\n  \n  let one = \"CCDTBJ\".charAt(getRandomInt(6))\n  let two = \"XZBNSK\".charAt(getRandomInt(6))\n  let three = \"YMLBML\".charAt(getRandomInt(6))\n  let four = \"ONIOIY\".charAt(getRandomInt(6))\n  let five = \"MCCTTS\".charAt(getRandomInt(6))\n  let six = \"HPTHTW\".charAt(getRandomInt (6))\n  let seven = \"RLLFDW\".charAt(getRandomInt(6))\n  let eight = \"EAOUUI\".charAt(getRandomInt(6))\n  let nine = \"RHNHNR\".charAt(getRandomInt(6))\n  let ten = \"OEAEAO\".charAt(getRandomInt(6))\n  let eleven = \"KPFVPG\".charAt(getRandomInt(6))\n  let twelve = \"GDGRRL\".charAt(getRandomInt (6))\n\n  let letters = [one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve]\n\n  return letters\n}\n\n/*\n  FIND LETTERS IN GRID\n*/\nfunction getNeighborsById(allTiles, id) {\n  let tile = allTiles.filter(t => t.id === id)[0]\n  return [tile, ...getNeighbors(allTiles, tile)]\n}\n\nfunction getNeighbors(allTiles, tile) {\n  let upNeighbor = null;\n  let downNeighbor = null;\n  let rightNeighbor = null;\n  let leftNeighbor = null;\n  allTiles.forEach(tempTile => {\n    \n    if (tempTile.x === tile.x && tempTile.y - tile.y === -1) {\n      upNeighbor = tempTile\n    }\n    \n    if (tempTile.x === tile.x && tempTile.y - tile.y === 1) {\n      downNeighbor = tempTile\n    }\n    \n    if (tempTile.x - tile.x === 1 && tempTile.y  ===tile.y) {\n      rightNeighbor = tempTile\n    }\n    \n    if (tempTile.x - tile.x === -1 && tempTile.y  ===tile.y) {\n      leftNeighbor = tempTile\n    }\n  })\n  return [upNeighbor, downNeighbor, leftNeighbor, rightNeighbor];\n}\n\nfunction getWordDown(allTiles, tile) {\n  const [up, down, left, right] = getNeighbors(allTiles, tile)\n  if (!down) {\n    return tile.letter\n  }\n  return `${tile.letter}${getWordDown(allTiles, down)}`\n}\n\nfunction getWordRight(allTiles, tile) {\n  const [up, down, left, right] = getNeighbors(allTiles, tile)\n  if (!right) {\n    return tile.letter\n  }\n  return `${tile.letter}${getWordRight(allTiles, right)}`\n}\n\n\nexport function getAllWords(allTiles) {\n  let words = []\n  console.log(\"IN GET ALL WORDS\", allTiles)\n\n  allTiles.forEach(tile => {\n    const [up, down, left, right] = getNeighbors(allTiles, tile)\n    //console.log(`Tile ${tile.letter} has: up neighbor ${up?.letter}, down neighbor ${down?.letter}, right neighbor ${right?.letter}, left neighbor ${left?.letter}`)\n\n    if (down && !up) {\n      console.log(`Found starting letter ${tile.letter}, getting word in DOWN direction`)\n      let word = getWordDown(allTiles, tile)\n      words.push(word)\n      console.log(`FOUND WORD ${word}`)\n    }\n\n    if (right && !left) {\n      console.log(`Found starting letter ${tile.letter}, getting word in RIGHT direction`)\n      let word = getWordRight(allTiles, tile)\n      words.push(word)\n      console.log(`FOUND WORD ${word}`)\n    }\n  })\n  return words\n}","export const ItemTypes = {\n  TILE: 'tile'\n}","import React, { useState } from \"react\";\nimport { ItemTypes } from '../constants'\nimport { useDrag, useDrop } from 'react-dnd'\nimport { swapTile } from \"../GameState\";\n\nconst SQUARE_SIZE = 56;\nconst TILE_OFFSET = -10;\n\nconst Tile = (props) => {\n\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: ItemTypes.TILE,\n        item: () => {\n          return {id: props.id}\n        },\n        collect: (monitor) => ({\n            isDragging: !!monitor.isDragging()\n          })\n      }))\n\n    const [{ isOver }, drop] = useDrop(() => ({\n        accept: ItemTypes.TILE,\n        drop: (item, monitor) => {\n          console.log(\"in tile drop\", item, props.id)\n          swapTile(item.id, props.id)\n          //console.log(item)\n          //return {x: x, y: y}\n        },\n        //drop: p => {return {x: props.x, y: props.y} },\n        collect: monitor => ({\n          isOver: !!monitor.isOver(),\n        }),\n      }), [props.x, props.y])\n\n    let x = props.x\n    let y = props.y\n    const styles = {\n      left: x * SQUARE_SIZE - TILE_OFFSET,\n      top: y * SQUARE_SIZE - TILE_OFFSET,\n      zIndex: `${x + 1}${y + 1}`,\n    };\n\n    return (\n        <div className='tile' key={props.id} style={styles} ref={(node) => drag(drop(node))}>\n            <span className=\"tile-letter\">{props.letter}</span>\n        </div>\n    );\n  }\n  \n  export default Tile;","import React from \"react\";\nimport classNames from \"classnames\";\nimport { ItemTypes } from '../constants'\nimport { useDrop } from 'react-dnd'\nimport { canDropTile, moveTile } from \"../GameState\";\n\nconst BoardSquare = (props) => {\n  const [{ isOver, canDrop }, drop] = useDrop(() => ({\n    accept: ItemTypes.TILE,\n    drop: (item, monitor) => {\n      moveTile(props.x, props.y, item)\n    },\n    //canDrop: (item) => canDropTile(props.x, props.y, item),\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n      canDrop: !!monitor.canDrop(),\n    }),\n  }), [props.x, props.y])\n\n  const classes = classNames({\n    \"board-square\": true,\n    \"dragged-over\": isOver,\n    //\"cant-drop\": isOver && !canDrop\n  });\n\n  return <div className={classes} ref={drop}/>;\n\n}\n  \n  export default BoardSquare;","import React from \"react\";\nimport classNames from \"classnames\";\nimport { ItemTypes } from '../constants'\nimport { useDrop } from 'react-dnd'\nimport { moveTile } from \"../GameState\";\n\nconst TileBenchSquare = (props) => {\n  const [{ isOver }, drop] = useDrop(() => ({\n    accept: ItemTypes.TILE,\n    drop: (item, monitor) => {\n      console.log(\"Dropped items props\", item)\n      moveTile(props.x, props.y, item)\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n    }),\n  }), [props.x, props.y])\n\n  const classes = classNames({\n    \"tile-bench-square\": true,\n    \"dragged-over\": isOver\n  });\n\n  return <div className={classes} ref={drop}/>;\n\n}\n  \n  export default TileBenchSquare;","import React from \"react\";\nimport Tile from \"./Tile\";\nimport utils from '../utils';\nimport TileBenchSquare from \"./TileBenchSquare\";\n\nconst BOARD_WIDTH = 12;\nconst BOARD_HEIGHT = 1;\n\nclass TileBench extends React.Component {\n\n  renderBoardSquares() {\n    const matrix = Array.matrix(BOARD_WIDTH, BOARD_HEIGHT);\n    return matrix.map((row, rowIndex) =>\n      row.map(index => {\n        return (\n          <TileBenchSquare\n            x={index}\n            y={rowIndex}\n            key={index}\n          />\n        );\n      })\n    );\n  };\n\n  render() {\n    let tiles = []\n    for (let tile of this.props.tiles) {\n      console.log(\"Creating Tile \", tile.letter, tile.x, tile.y)\n      tiles.push(<Tile key={tile.id} {...tile} />)\n    }\n\n    console.log(\"Tile bench\", tiles)\n    return (\n        <div className=\"tile-bench-border\">\n          <div className=\"tile-bench\">\n            {tiles}\n            {this.renderBoardSquares()}\n          </div>\n      </div>\n    );\n  }\n  }\n  \n  export default TileBench;","import React from \"react\";\nimport Tile from \"./Tile\";\nimport BoardSquare from './BoardSquare';\nimport utils from '../utils';\nimport TileBench from \"./TileBench\";\n\nconst BOARD_WIDTH = 10;\nconst BOARD_HEIGHT = 10;\n\nclass GameArea extends React.Component {\n\n  renderBoardSquares() {\n    const matrix = Array.matrix(BOARD_WIDTH, BOARD_HEIGHT);\n    return matrix.map((row, rowIndex) =>\n      row.map(index => {\n        return (\n          <BoardSquare\n            x={index}\n            y={2 + rowIndex}\n            key={index}\n          />\n        );\n      })\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <div id=\"scrabble\">\n          <TileBench tiles={this.props.tiles}/>\n          <div className=\"board-border\">\n            <div className=\"board\">\n              {/* {tiles} */}\n              {this.renderBoardSquares()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  }\n  \n  export default GameArea;","import React, { useState, useEffect } from \"react\";\nimport { getAllWords, observe, resetTile } from \"../GameState\";\nimport GameArea from \"../components/GameArea\"\nimport { generateRandomLetters } from \"../GameState\";\nimport Typography from '@mui/material/Typography';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport CheckIcon from '@mui/icons-material/Check';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport Words from '../words.json'\n\nfunction randomize(setTiles, setFoundWords) {\n  let newLetters = generateRandomLetters()\n\n  for (let i = 0; i < setTiles.length; i++) {\n    let newTile = {\n      x: i,\n      y: 0,\n      letter: newLetters[i],\n      id: `${i}`\n    }\n\n    setTiles[i](newTile)\n    resetTile(i, newTile)\n    setFoundWords([])\n  }\n}\n\nfunction validate(tiles, setFoundWords) {\n  console.log(tiles)\n  let anyStartingSpot = Object.values(tiles).some(tile => tile.y === 0)\n  if (anyStartingSpot) {\n    alert(\"NOT ALL ON BOARD\")\n    return;\n  }\n\n  const words = getAllWords(tiles)\n  let checkedWords = []\n  words.forEach(word => {\n    checkedWords.push({\n      word: word,\n      valid: Words.hasOwnProperty(word)\n    })\n  })\n\n  setFoundWords(checkedWords) \n}\n\nconst GameView = (props) => {\n\n  const [tile1, setTile1] = useState({x: 0, y: 0, letter: props.letters[0], id: \"0\"});\n  useEffect(() => observe((newPos) => setTile1(newPos), tile1));\n\n  const [tile2, setTile2] = useState({x: 1, y: 0, letter: props.letters[1], id: \"1\"});\n  useEffect(() => observe((newPos) => setTile2(newPos), tile2));\n\n  const [tile3, setTile3] = useState({x: 2, y: 0, letter: props.letters[2], id: \"2\"});\n  useEffect(() => observe((newPos) => setTile3(newPos), tile3));\n\n  const [tile4, setTile4] = useState({x: 3, y: 0, letter: props.letters[3], id: \"3\"});\n  useEffect(() => observe((newPos) => setTile4(newPos), tile4));\n\n  const [tile5, setTile5] = useState({x: 4, y: 0, letter: props.letters[4], id: \"4\"});\n  useEffect(() => observe((newPos) => setTile5(newPos), tile5));\n\n  const [tile6, setTile6] = useState({x: 5, y: 0, letter: props.letters[5], id: \"5\"});\n  useEffect(() => observe((newPos) => setTile6(newPos), tile6));\n\n  const [tile7, setTile7] = useState({x: 6, y: 0, letter: props.letters[6], id: \"6\"});\n  useEffect(() => observe((newPos) => setTile7(newPos), tile7));\n\n  const [tile8, setTile8] = useState({x: 7, y: 0, letter: props.letters[7], id: \"7\"});\n  useEffect(() => observe((newPos) => setTile8(newPos), tile8));\n\n  const [tile9, setTile9] = useState({x: 8, y: 0, letter: props.letters[8], id: \"8\"});\n  useEffect(() => observe((newPos) => setTile9(newPos), tile9));\n\n  const [tile10, setTile10] = useState({x: 9, y: 0, letter: props.letters[9], id: \"9\"});\n  useEffect(() => observe((newPos) => setTile10(newPos), tile10));\n\n  const [tile11, setTile11] = useState({x: 10, y: 0, letter: props.letters[10], id: \"10\"});\n  useEffect(() => observe((newPos) => setTile11(newPos), tile11));\n\n  const [tile12, setTile12] = useState({x: 11, y: 0, letter: props.letters[11], id: \"11\"});\n  useEffect(() => observe((newPos) => setTile12(newPos), tile12));\n\n  let tiles = [tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12]\n  let setTiles = [setTile1, setTile2, setTile3, setTile4, setTile5, setTile6, setTile7, setTile8, setTile9, setTile10, setTile11, setTile12]\n\n\n  const [foundWords, setFoundWords] = useState([]);\n\n  let foundWordsDivs = []\n  for (let word of foundWords) {\n    foundWordsDivs.push(\n      <ListItem>\n        <ListItemText>\n          <ListItemIcon>\n            { word.valid &&\n              <CheckIcon color=\"green\" />\n            }\n            { !word.valid &&\n              <ErrorOutlineIcon color=\"red\" />\n            }\n          </ListItemIcon>\n          {word.word}\n        </ListItemText>\n      </ListItem>\n    )\n  }\n\n  console.log(\"\\n\\nRerender Game View\")\n  return (\n    <>\n      <div>\n        <GameArea tiles={tiles}/>\n        <button onClick={() => randomize(setTiles, setFoundWords)}> Randomize </button>\n        <button onClick={() => validate(tiles, setFoundWords)}> Validate </button>\n      </div >\n      <div className=\"scrabble\">\n        <div className=\"scoreboard-border\">\n          <div className=\"scoreboard\">\n            <Typography variant=\"h6\" gutterBottom>\n              Q Less\n            </Typography>\n          </div>\n          <List>\n              {foundWordsDivs}\n          </List>\n        </div>\n      </div>\n    </>\n\n  )\n}\n  \n  export default GameView;","import './App.css';\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport GameView from './views/GameView';\nimport { generateRandomLetters } from './GameState';\n\nfunction App() {\n\n  console.log(\"Rerender App\")\n\n  const letters = generateRandomLetters()\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"App\">\n        <GameView letters={letters}/>\n      </div>\n    </DndProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nimport \"./css/main.css\";\nimport \"./css/animate.css\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nif(module.hot){\n  module.hot.accept()\n}\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}