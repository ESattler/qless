{"version":3,"sources":["utils.js","GameState.js","constants.js","components/Tile.js","components/Square.js","components/Board.js","components/TileBench.js","components/GameArea.js","components/GithubFooter.js","components/HelpDialog.js","views/ToolBarView.js","components/ValidationModal.js","views/GameButtons.js","views/GameView.js","views/AppView.js","App.js","index.js"],"names":["Array","prototype","swap","a","b","this","length","temp","range","n","from","x","i","matrix","y","rows","columns","map","row","slice","observer","letters","emitChange","resetTiles","tiles","getRandomInt","max","Math","floor","random","generateRandomLetters","charAt","createTiles","newLetters","tempTiles","forEach","letter","id","String","getNeighbors","allTiles","tile","upNeighbor","downNeighbor","rightNeighbor","leftNeighbor","tempTile","getWordDown","down","getWordRight","right","getAllWords","words","console","log","up","left","word","push","ItemTypes","Tile","props","useDrag","type","item","collect","monitor","isDragging","drag","useDrop","accept","drop","fromID","toID","fromX","fromY","toX","toY","swapTile","isOver","size","board","Box","sx","width","height","background","cursor","borderRadius","ref","node","Typography","variant","position","color","fontSize","lineHeight","textAlign","fontWeight","TileBenchSquare","moveTile","style","backgroundColor","boxShadow","Board","squares","rowIndex","tempRow","index","element","Square","W","Stack","spacing","direction","justifyContent","alignItems","renderBoardSquares","TileBench","GameArea","Container","disableGutters","maxWidth","component","pt","pb","GithubFooter","borderTop","theme","mt","py","align","onClick","event","window","open","opacity","HelpDialog","Dialog","onClose","DialogTitle","m","p","IconButton","top","palette","grey","DialogContent","Divider","gutterBottom","Link","href","target","ToolBarView","useState","helpOpen","setHelpOpen","handleHelpClose","borderBottom","Grid","container","md","noWrap","PaperComponent","handle","cancel","Paper","ValidationModal","validWords","invalidWords","foundWords","valid","sm","toolTipOpen","setToolTipOpen","setCopyText","fill","text","j","concat","andleClose","fullWidth","handleClose","justify","alignContent","Tooltip","title","Button","navigator","clipboard","writeText","setTimeout","NotAllConnected","NotAllOnBoard","GameButtons","shuffle","Object","values","filter","spots","keys","sort","shuffledSpots","pop","shuffleTiles","setTiles","validate","some","setValidationError","handleClick","examinedTiles","countConnect","includes","areAllConnected","checkedWords","Words","hasOwnProperty","setFoundWords","handleValidationOpen","anchorEl","setAnchorEl","currentTarget","validationError","validationOpen","setValidationOpen","createNewGame","every","setTilesBackToBench","Popover","Boolean","anchorOrigin","vertical","horizontal","GameView","useEffect","o","observe","newPos","Fragment","GlobalStyles","styles","ul","margin","padding","listStyle","CssBaseline","AppView","DndProvider","backend","HTML5Backend","App","path","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.82357670.chunk.js","sourcesContent":["/**\n * Array.prototype.swap\n * Rearrange an array to swap the positions of two elements.\n * @param {Number} a - the index of the first element to swap.\n * @param {Number} b - the index of the second element to swap.\n * @returns {Array}\n * @example\n * // returns [ 'a', 'c', 'b' ]\n * [ 'a', 'b', 'c' ].swap(1, 2)\n */\n Array.prototype.swap = function (a, b) {\n  if ( b >= this.length || b < 0 ) return this;\n\n  // Temporary variable to hold data while we juggle\n  let temp = this[a];\n  this[a] = this[b];\n  this[b] = temp;\n  return this;\n};\n\n/**\n * Array.range\n * Create a new array of length n, where the elements are numbers\n * from 0 to n - 1.\n * @param {Number} n - the desired length of the range.\n * @returns {Array}\n * @example\n * // returns [ 0, 1, 2, 3 ]\n * Array.range(4);\n */\nArray.range = n => Array.from(new Array(n), (x,i) => i);\n\n/**\n * Array.matrix\n * Create a new two-dimensional array, where each element is its own index.\n * @param {Number} x - the desired number of columns (possible x values)\n * @param {Number} y - the desired number of rows (possible y values)\n * @returns {Array}\n * @example\n * // returns [\n * //   [ 0, 1, 2 ],\n * //   [ 0, 1, 2 ]\n * // ]\n * Array.matrix(3, 2);\n */\nArray.matrix = (x, y) => {\n  const rows = Array.range(y);\n  const columns = Array.range(x);\n  return rows.map( (row, i) => columns.slice() );\n}","import Words from './words.json'\n\nlet letters = {}\nlet observer;\n\n/**\n  PROPOGATE CHANGES\n*/\n\nfunction emitChange() {\n  observer(letters)\n}\n\nexport function observe(o, tiles) {\n  observer = o\n  letters = tiles\n}\n\nexport function moveTile(toX, toY, item) {\n  letters[item.id] = {\n    ...letters[item.id],\n    x: toX,\n    y: toY,\n  }\n  emitChange();\n}\n\nexport function swapTile(fromID, toID) {\n  let fromX = letters[fromID].x;\n  let fromY = letters[fromID].y;\n\n  let toX = letters[toID].x;\n  let toY = letters[toID].y;\n\n  letters[fromID] = {\n    ...letters[fromID],\n    x: toX,\n    y: toY\n  }\n\n  letters[toID] = {\n    ...letters[toID],\n    x: fromX,\n    y: fromY\n  }\n  emitChange()\n}\n\nexport function canDropTile(squareX, squareY, item) {\n  let allStartingSpot = Object.values(letters).every(tile => tile.y === 0)\n\n  let nextToExistingLetter = false\n  Object.values(letters).forEach(tile => {\n    if (tile.y !== 0 && tile.id !== item.id && ((Math.abs(tile.x - squareX) === 1 &&  Math.abs(tile.y - squareY) === 0) || (Math.abs(tile.y - squareY) === 1 && Math.abs(tile.x - squareX) === 0))) {\n      nextToExistingLetter = true\n    }\n  })\n\n\n  let [tile, up, down, left, right] = getNeighborsById(Object.values(letters), item.id);\n  let connectingPiece = (((up && down) || (left && right)) && tile.y !== 0);\n\n  return (allStartingSpot || nextToExistingLetter) && !connectingPiece\n}\n\nexport function resetTiles(tiles) {\n    letters = tiles\n}\n\n/*\n  GENERATE RANDOM LETTERS\n*/\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nexport function generateRandomLetters() {\n  \n  let one = \"CCDTBJ\".charAt(getRandomInt(6))\n  let two = \"XZBNSK\".charAt(getRandomInt(6))\n  let three = \"YMLBML\".charAt(getRandomInt(6))\n  let four = \"ONIOIY\".charAt(getRandomInt(6))\n  let five = \"MCCTTS\".charAt(getRandomInt(6))\n  let six = \"HPTHTW\".charAt(getRandomInt (6))\n  let seven = \"RLLFDW\".charAt(getRandomInt(6))\n  let eight = \"EAOUUI\".charAt(getRandomInt(6))\n  let nine = \"RHNHNR\".charAt(getRandomInt(6))\n  let ten = \"OEAEAO\".charAt(getRandomInt(6))\n  let eleven = \"KPFVPG\".charAt(getRandomInt(6))\n  let twelve = \"GDGRRL\".charAt(getRandomInt (6))\n\n  let letters = [one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve]\n\n  return letters\n}\n\nexport function createTiles(newLetters) {\n  let tempTiles = {}\n  newLetters.forEach((letter, i) => {\n    tempTiles[i] = {\n      x: i,\n      y: 0,\n      letter,\n      id: String(i)\n    }\n  })\n  return tempTiles\n}\n\nexport function shuffleTiles(shuffledSpots) {\n  let tempTiles = {}\n  for (let i = 0; i < Object.values(letters).length; i++) {\n    tempTiles[i] = {\n      ...letters[i]\n    }\n\n    if (tempTiles[i].y === 0) {\n      tempTiles[i].x = shuffledSpots.pop()\n    }\n\n  }\n\n  return tempTiles\n}\n\n/*\n  FIND LETTERS IN GRID\n*/\nexport function areAllConnected(tiles) {\n  let examinedTiles = []\n\n  let countConnect = (function (tile) {\n    const [up, down, left, right] = getNeighbors(tiles, tile)\n    console.log(`Looking at tile ${tile.letter}`)\n    if (up && !examinedTiles.includes(up.id) ) {\n      examinedTiles.push(up.id)\n      countConnect(up)\n    }\n    if (down && !examinedTiles.includes(down.id)) {\n      examinedTiles.push(down.id)\n      countConnect(down)\n    }\n    if (left && !examinedTiles.includes(left.id)) {\n      examinedTiles.push(left.id)\n      countConnect(left)\n    }\n    if (right && !examinedTiles.includes(right.id)) {\n      examinedTiles.push(right.id)\n      countConnect(right)\n    }\n  })\n\n  countConnect(tiles[0])\n\n  return examinedTiles.length === 12\n}\n\nfunction getNeighborsById(allTiles, id) {\n  let tile = allTiles.filter(t => t.id === id)[0]\n  return [tile, ...getNeighbors(allTiles, tile)]\n}\n\nfunction getNeighbors(allTiles, tile) {\n  let upNeighbor = null;\n  let downNeighbor = null;\n  let rightNeighbor = null;\n  let leftNeighbor = null;\n  allTiles.forEach(tempTile => {\n    \n    if (tempTile.x === tile.x && tempTile.y - tile.y === -1) {\n      upNeighbor = tempTile\n    }\n    \n    if (tempTile.x === tile.x && tempTile.y - tile.y === 1) {\n      downNeighbor = tempTile\n    }\n    \n    if (tempTile.x - tile.x === 1 && tempTile.y  ===tile.y) {\n      rightNeighbor = tempTile\n    }\n    \n    if (tempTile.x - tile.x === -1 && tempTile.y  ===tile.y) {\n      leftNeighbor = tempTile\n    }\n  })\n  return [upNeighbor, downNeighbor, leftNeighbor, rightNeighbor];\n}\n\nfunction getWordDown(allTiles, tile) {\n  const [, down, , ] = getNeighbors(allTiles, tile)\n  if (!down) {\n    return tile.letter\n  }\n  return `${tile.letter}${getWordDown(allTiles, down)}`\n}\n\nfunction getWordRight(allTiles, tile) {\n  const [, , , right] = getNeighbors(allTiles, tile)\n  if (!right) {\n    return tile.letter\n  }\n  return `${tile.letter}${getWordRight(allTiles, right)}`\n}\n\n\nexport function getAllWords(allTiles) {\n  let words = []\n  console.log(\"IN GET ALL WORDS\", allTiles)\n\n  allTiles.forEach(tile => {\n    const [up, down, left, right] = getNeighbors(allTiles, tile)\n\n    if (down && !up) {\n      console.log(`Found starting letter ${tile.letter}, getting word in DOWN direction`)\n      let word = getWordDown(allTiles, tile)\n      words.push(word)\n      console.log(`FOUND WORD ${word}`)\n    }\n\n    if (right && !left) {\n      console.log(`Found starting letter ${tile.letter}, getting word in RIGHT direction`)\n      let word = getWordRight(allTiles, tile)\n      words.push(word)\n      console.log(`FOUND WORD ${word}`)\n    }\n  })\n  return words\n}\n\n/*\n  SOLVE\n*/\nexport function generateMatches(letters) {\n\n  let allPossible = getPermutationsAllLengths(letters)\n  let results = [];\n\n  for (let i = 0; i < allPossible.length; i++) {\n    if (Words.hasOwnProperty(allPossible[i].toUpperCase())) {\n      results.push(allPossible[i].toUpperCase());\n    }\n  }\n  // filter out duplicates and sort by length\n  results = [...new Set(results)].sort((a, b) => b.length - a.length);\n  console.log(results.slice(0, 5))\n};\n\n// find all permutations of an array\nfunction swap(array, i, j) {\n  if (i !== j) {\n    let swap = array[i];\n    array[i] = array[j];\n    array[j] = swap;\n  }\n};\n\nfunction permute_rec(res, str, array) {\n  if (array.length === 0 && Words.hasOwnProperty(str)) {\n    res.push(str);\n  } else {\n    for (let i = 0; i < array.length; i++) {\n      swap(array, 0, i);\n      permute_rec(res, str + array[0], array.slice(1));\n      swap(array, 0, i);\n    }\n  }\n};\n\nfunction xpermute_rec(res, sub, array) {\n  if (array.length === 0) {\n    console.log(res)\n    if (sub.length >= 5) permute_rec(res, \"\", sub);\n  } else {\n    xpermute_rec(res, sub, array.slice(1));\n    xpermute_rec(res, sub.concat(array[0]), array.slice(1));\n  }\n};\n\n// find all permutations for all lengths\nfunction getPermutationsAllLengths(array) {\n  let res = [];\n  xpermute_rec(res, [], array);\n  return res;\n};","export const ItemTypes = {\n  TILE: 'tile'\n}","import React from \"react\";\nimport { ItemTypes } from '../constants'\nimport { useDrag, useDrop } from 'react-dnd'\nimport { swapTile } from \"../GameState\";\nimport { Box, Typography } from \"@mui/material\";\n\nconst SQUARE_SIZE = 70;\n\nconst Tile = (props) => {\n\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: ItemTypes.TILE,\n        item: () => {\n          return {id: props.id}\n        },\n        collect: (monitor) => ({\n            isDragging: !!monitor.isDragging()\n          })\n      }))\n\n    const [{ isOver }, drop] = useDrop(() => ({\n        accept: ItemTypes.TILE,\n        drop: (item, monitor) => {\n          swapTile(item.id, props.id)\n        },\n        collect: monitor => ({\n          isOver: !!monitor.isOver(),\n        }),\n      }), [props.x, props.y])\n\n\n    let size = props.board ? '6vh' : '5vh'\n\n    return (\n      <Box\n        sx={{\n          width: size,\n          height: size,\n          background: \"#FFA987\",\n          cursor: \"move\",\n          borderRadius: \"5px\"\n        }}\n        ref={(node) => drag(drop(node))}\n      >\n        <Typography variant=\"h3\" sx={{\n          position: \"relative\",\n          color: \"#222\",\n          height: 1,\n          fontSize: \"2.5rem\",\n          lineHeight: size,\n          textAlign: \"center\",\n          fontWeight: 700,\n        }}>\n          {props.letter}\n        </Typography>  \n      </Box>\n    );\n  }\n  \n  export default Tile;","import React from \"react\";\nimport { Box } from \"@mui/material\";\nimport { ItemTypes } from '../constants'\nimport { useDrop } from 'react-dnd'\nimport { moveTile } from \"../GameState\";\n\nconst TileBenchSquare = (props) => {\n  const [{ isOver }, drop] = useDrop(() => ({\n    accept: ItemTypes.TILE,\n    drop: (item, monitor) => {\n      console.log(\"Dropped items props\", item)\n      moveTile(props.x, props.y, item)\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n    }),\n  }), [props.x, props.y])\n\n  let size = props.board ? '6vh' : '5vh'\n\n  let style = {\n    width: size,\n    height: size,\n    backgroundColor: \"#444140\",\n    boxShadow: \"inset 0px 0px 0px 1px #F4E5E1\",\n  }\n  if (isOver) {\n    style.background = \"rgb(87, 155, 87)\"\n  }\n\n  return <Box\n    sx={style}\n    ref={drop}\n  />\n\n}\n  \n  export default TileBenchSquare;","import React from \"react\";\nimport utils from '../utils';\nimport Tile from \"./Tile\";\nimport Square from \"./Square\";\nimport { Stack } from '@mui/material';\n\nconst BOARD_WIDTH = 8;\nconst BOARD_HEIGHT = 8;\n\nconst Board = (props) => {\n\n  function renderBoardSquares(tiles) {\n    const matrix = Array.matrix(BOARD_WIDTH, BOARD_HEIGHT);\n\n    let squares = []\n\n    matrix.map((row, rowIndex) => {\n      let tempRow = []\n\n      row.map(index => {\n\n        let element = <Square\n          x={index}W\n          y={rowIndex+1}\n          key={`board-${index}${rowIndex}`}\n          board={true}\n        />\n\n        tiles.forEach(tile => {\n          if (tile.x === index && tile.y === rowIndex+1) {\n            element = <Tile key={`tile-${tile.id}`} {...tile} board={true}/>\n          }\n        })\n        tempRow.push(element)\n      })\n      squares.push(\n      <Stack spacing={0} direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n          {tempRow}\n      </Stack>\n      )\n    })\n    return squares;\n  };\n\n  return renderBoardSquares(props.tiles)\n}\n\nexport default Board;","import React from \"react\";\nimport Tile from \"./Tile\";\nimport Square from \"./Square\";\nimport Stack from '@mui/material/Stack';\n\nconst BOARD_WIDTH = 12;\nconst BOARD_HEIGHT = 1;\n\nconst TileBench = (props) => { \n\n  function renderBoardSquares(tiles) {\n    const matrix = Array.matrix(BOARD_WIDTH, BOARD_HEIGHT);\n\n    let squares = []\n\n    matrix.map((row, rowIndex) => {\n      let tempRow = []\n\n      row.map(index => {\n\n        let element = <Square\n          x={index}\n          y={rowIndex}\n          key={`tile-bench-${index}${rowIndex}`}\n          board={false}\n        />\n\n        tiles.forEach(tile => {\n          if (tile.x === index && tile.y === rowIndex) {\n            element = <Tile key={`tile-${tile.id}`} {...tile} board={false} />\n          }\n        })\n        tempRow.push(element)\n      })\n      squares.push(\n      <Stack spacing={1} direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n          {tempRow}\n      </Stack>\n      )\n    })\n    return squares;\n  };\n\n  return renderBoardSquares(props.tiles)\n}\n\nexport default TileBench;","import React from \"react\";\nimport { Container } from \"@mui/material\";\nimport Board from \"./Board\";\nimport TileBench from \"./TileBench\";\n\nconst GameArea = (props) => {\n\n  return (\n    <Container disableGutters maxWidth=\"md\" component=\"main\" sx={{ pt: 0, pb: 0 }}>\n      <Container disableGutters maxWidth=\"lg\" component=\"main\" sx={{ pt: 5, pb: 5 }}>\n        <Board tiles={props.tiles}/>\n      </Container>\n      <Container disableGutters maxWidth=\"lg\" component=\"main\" sx={{ pt: 5, pb: 6 }}>\n        <TileBench tiles={props.tiles}/>  \n      </Container>\n    </Container>\n  );\n}\n  \nexport default GameArea;","import GitHubIcon from '@mui/icons-material/GitHub';\nimport { Typography, Container } from '@mui/material/';\n\nconst GithubFooter = () => {\n  return (\n    <Container\n      maxWidth=\"md\"\n      component=\"footer\"\n      sx={{\n        borderTop: (theme) => `1px solid #555a5e`,\n        mt: 8,\n        py: [3, 6],\n      }}\n    >\n      <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n          <GitHubIcon \n          onClick={event =>  window.open('https://github.com/ESattler/qless/', '_blank')}\n          sx={{\n            fontSize: 50,\n            '&:hover': {\n              opacity: 0.5\n            }\n          }} />\n      </Typography>\n    </Container>\n  );\n}\n\nexport default GithubFooter;","import {Typography, IconButton, Dialog, DialogTitle, DialogContent, Link, Divider } from '@mui/material'\nimport CloseIcon from '@mui/icons-material/Close';\n\n\nconst HelpDialog = (props) => {\n  return (\n    <Dialog\n      onClose={props.onClose}\n      aria-labelledby=\"customized-dialog-title\"\n      open={props.open}\n    >\n      <DialogTitle sx={{ m: 0, p: 2 }}>\n          <IconButton\n            aria-label=\"close\"\n            onClick={props.onClick}\n            sx={{\n              position: 'absolute',\n              right: 8,\n              top: 8,\n              color: (theme) => theme.palette.grey[500],\n            }}\n          >\n            <CloseIcon />\n          </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <Divider sx={{ m: 0, p: 2 }}>HISTORY</Divider>\n        <Typography gutterBottom>\n          QLess is based on the dice game of a similar name. The Q-Less dice game was created by Tom Sturdevant\n          and can be bought from the <Link href=\"https://www.q-lessgame.com/\" target=\"_blank\">Q-Less website</Link>.\n        </Typography>\n        <Divider sx={{ m: 0, p: 2 }}>HOW TO PLAY</Divider>\n        <Typography gutterBottom>\n          The goal of the game is to create a board of interconnecting words using twelve randomized letters.\n          All words are validated using the 2019 official Scrabble® dictionary.\n        </Typography>\n        <Divider sx={{ m: 0, p: 2 }}>RULE CHANGES</Divider>\n        <Typography gutterBottom>\n          This game differs from the official Q-Less game in that it allows the use of two letter words.\n          In the settings you can turn on the official ruleset which will ban two letter words.\n        </Typography>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default HelpDialog","\nimport { useState } from \"react\";\nimport { Grid, Typography, Container, IconButton } from '@mui/material'\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport HelpDialog from '../components/HelpDialog';\n\nconst ToolBarView = (props) => {\n\n  const [helpOpen, setHelpOpen] = useState(false);\n  const handleHelpOpen = () => {\n    setHelpOpen(true);\n  };\n\n  const handleHelpClose = () => {\n    setHelpOpen(false);\n  };\n\n\n  return (\n    <Container\n      maxWidth=\"xs\"\n      component=\"header\"\n      sx={{\n        borderBottom: (theme) => `1px solid #555a5e`,\n        pb: 0\n      }}\n    >\n      <Grid container maxWidth=\"sm\" justifyContent=\"center\">\n        <Grid container item md={2} justifyContent=\"flex-end\" alignItems=\"flex-end\">\n            <IconButton aria-label=\"delete\" size=\"large\" onClick={() => handleHelpOpen()}>\n              <HelpOutlineIcon fontSize=\"inherit\" sx={{ fontSize: \"40px\"}}/>\n            </IconButton>\n        </Grid>\n        <Grid container item md={5} justifyContent=\"center\">\n          <Typography variant=\"h3\" color=\"inherit\" align=\"center\" noWrap>\n            QLESS\n          </Typography>\n        </Grid>\n        <Grid container item md={2} justifyContent=\"flex-start\" alignItems=\"flex-start\">\n          <IconButton aria-label=\"delete\" size=\"large\">\n            <SettingsIcon fontSize=\"inherit\" sx={{ fontSize: \"40px\"}}/>\n          </IconButton>\n        </Grid>\n      </Grid>\n      <HelpDialog open={helpOpen} onClose={handleHelpClose} onClick={handleHelpClose}/>\n    </Container>\n  );\n}\n\nexport default ToolBarView","import { useState } from 'react';\nimport { Grid, Paper, IconButton, Dialog, DialogTitle, DialogContent, Divider, Tooltip, Button } from '@mui/material'\nimport CloseIcon from '@mui/icons-material/Close';\nimport CheckIcon from '@mui/icons-material/Check';\nimport Draggable from \"react-draggable\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nconst ValidationModal = (props) => { \n\n  let validWords = []\n  let invalidWords = []\n  for (let word of props.foundWords) {\n    if (word.valid) {\n      validWords.push(\n          <Grid container justifyContent=\"center\"item sm={12}>\n            <CheckIcon color=\"success\" /> {word.word}\n          </Grid>\n      )\n    } else {\n      invalidWords.push(\n        <Grid container justifyContent=\"center\"item sm={12}>\n          <CloseIcon color=\"error\" /> {word.word}\n        </Grid>\n      )\n    }\n  }\n\n  const [toolTipOpen, setToolTipOpen] = useState(false);\n  const handleShareClick = () => {\n    setToolTipOpen(true)\n    navigator.clipboard.writeText(setCopyText())\n    setTimeout(() => {\n      setToolTipOpen(false);\n    }, \"500\");\n  }\n\n  const setCopyText = () => {\n    if (!props.open) {\n      return \"\"\n    }\n\n    let matrix = [];\n    for(let  i = 0;  i < 10; i++) {\n        matrix[i] = new Array(10).fill(\"⬛\");\n    }\n\n    props.tiles.forEach(tile => {\n      console.log(\"Tile\", tile.letter, tile.x, tile.y)\n      let x = tile.x\n      let y = tile.y\n      matrix[y-1][x] = \"🟩\"\n    })\n\n    let text = \"QLess Game (https://tinyurl.com/qlessgame)\\n\\n\"\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        text = text.concat(matrix[i][j])\n      }\n      text = text.concat(\"\\n\")\n    }\n\n    return text\n  }\n\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.andleClose}\n      PaperComponent={PaperComponent}\n      aria-labelledby=\"draggable-dialog-title\"\n      id=\"draggable-dialog-title\"\n      maxWidth=\"sm\"\n      fullWidth={true}\n    >\n      <DialogTitle style={{ cursor: \"move\" }}>\n        <IconButton\n          aria-label=\"close\"\n          onClick={props.handleClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        { validWords.length > 0 &&\n          <>\n            <Divider sx={{ m: 0, p: 2 }}>CORRECT WORDS</Divider>\n            <Grid container justify=\"center\" alignContent=\"center\" sm={12} spacing={3}>\n              {validWords}\n            </Grid>\n          </>\n        } \n        { invalidWords.length > 0 &&\n          <>\n            <Divider sx={{ m: 0, p: 2 }}>INCORRECT WORDS</Divider>\n            <Grid container justify=\"center\" alignContent=\"center\" sm={12} spacing={3}>\n              {invalidWords}\n            </Grid>\n          </>\n        }\n        { invalidWords.length === 0 &&\n          <>\n            <Divider sx={{ m: 2, p: 2 }}></Divider>\n            <Grid container justify=\"center\" alignContent=\"center\" sm={12}>\n              <Grid container justifyContent=\"center\"item sm={12}>\n                <Tooltip open={toolTipOpen} title=\"Copied\">\n                  <Button variant=\"contained\" sx={{backgroundColor: \"#FFA987\", width: 0.33}} onClick={() => handleShareClick()}>Share</Button>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </>\n        } \n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default ValidationModal","import { useState } from 'react';\nimport { Grid, Button, Container, Popover, Typography } from '@mui/material'\nimport { areAllConnected, createTiles, getAllWords, resetTiles, shuffleTiles, generateRandomLetters } from \"../GameState\";\nimport Words from '../words.json'\nimport ValidationModal from '../components/ValidationModal';\n\nconst NotAllConnected = \"NotAllConnected\"\nconst NotAllOnBoard = \"NotAllOnBoard\"\n\nconst GameButtons = (props) => {\n\n  /**\n   * Generates new random letters and resets tiles\n   */\n  const createNewGame = () => {\n    let newLetters = generateRandomLetters()\n  \n    let tempTiles = createTiles(newLetters)\n  \n    props.setTiles({...tempTiles})\n    resetTiles({...tempTiles})\n    setFoundWords([])\n  }\n  \n  /**\n   * Moves all tiles back to bench\n   */\n  const setTilesBackToBench = () => {\n    let allStartingSpot = Object.values(props.tiles).every(tile => tile.y === 0)\n    if (allStartingSpot) {\n      return\n    }\n    let letters = Object.values(props.tiles).map(tile => tile.letter)\n    let tempTiles = createTiles(letters)\n  \n    props.setTiles({...tempTiles})\n    resetTiles({...tempTiles})\n  }\n  \n  /**\n   * Shuffles tiles still on bench\n   */\n  const shuffle = () => {\n    let x = Object.values(props.tiles).filter(tile => tile.y === 0).length\n    const spots = [...Array(x).keys()].sort(() => (Math.random() > 0.5) ? 1 : -1)\n    console.log(spots)\n  \n    let tempTiles = shuffleTiles(spots)\n    props.setTiles({...tempTiles})\n    resetTiles({...tempTiles})\n  }\n  \n  /**\n   * Validates all the letters on the board, connected and then opens\n   * modal showing which are spelling correct\n   */\n  const validate = (event) => {\n    let anyStartingSpot = Object.values(props.tiles).some(tile => tile.y === 0)\n    if (anyStartingSpot) {\n      setValidationError(NotAllOnBoard)\n      handleClick(event)\n      return;\n    }\n  \n    let allConnected = areAllConnected(Object.values(props.tiles))\n    if (!allConnected) {\n      setValidationError(NotAllConnected)\n      handleClick(event)\n      return;\n    }\n  \n    const words = getAllWords(Object.values(props.tiles))\n    let checkedWords = []\n    words.forEach(word => {\n      console.log(`${word} | ${Words.hasOwnProperty(word)}`)\n      checkedWords.push({\n        word: word,\n        valid: Words.hasOwnProperty(word)\n      })\n    })\n  \n    setFoundWords(checkedWords)\n    handleValidationOpen()\n  }\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const [validationError, setValidationError] = useState(null);\n\n  const [validationOpen, setValidationOpen] = useState(false);\n  const [foundWords, setFoundWords] = useState([]);\n\n  const handleValidationOpen = () => {\n    setValidationOpen(true);\n  };\n\n  const handleValidationClose = () => {\n    setValidationOpen(false);\n  };\n\n\n\n  return (\n    <Container disableGutters maxWidth=\"sm\" component=\"main\" justifyContent=\"center\">\n      <Grid container maxWidth=\"sm\" spacing={3}>\n        <Grid container item md={3} justifyContent=\"center\">\n          <Button variant=\"contained\" sx={{backgroundColor: \"#E54B4B\", width: 1}} onClick={() => createNewGame()}>New Game</Button>\n        </Grid>\n        <Grid container item md={3} justifyContent=\"center\">\n          <Button variant=\"contained\" sx={{backgroundColor: \"#FFA987\", width: 1}} onClick={() => setTilesBackToBench()}>Reset Tiles</Button>\n        </Grid>\n        <Grid container item md={3} justifyContent=\"center\">\n          <Button variant=\"contained\" sx={{backgroundColor: \"#FFA987\", width: 1}} onClick={() => shuffle()}>Shuffle</Button>\n        </Grid>\n        <Grid container item md={3} justifyContent=\"center\">\n          <Button variant=\"contained\" sx={{backgroundColor: \"#FFA987\", width: 1}} onClick={(event) => validate(event)}>Validate</Button>\n          <Popover\n            open={Boolean(anchorEl)}\n            anchorEl={anchorEl}\n            onClose={handleClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'left',\n            }}\n          >\n            {validationError === NotAllConnected &&\n              <Typography sx={{ p: 2 }}>All tiles are not currently connected</Typography>\n            }\n            {validationError === NotAllOnBoard &&\n              <Typography sx={{ p: 2 }}>All tiles are not currently on the board</Typography>\n            }\n          </Popover>\n        </Grid>\n      </Grid>\n      <ValidationModal open={validationOpen} handleClose={handleValidationClose} foundWords={foundWords} tiles={Object.values(props.tiles)} />\n    </Container>\n  )\n}\n\nexport default GameButtons","import React, { useState, useEffect } from \"react\";\nimport { CssBaseline, GlobalStyles } from '@mui/material'\nimport { observe } from \"../GameState\";\nimport GameAreaNew from \"../components/GameArea\";\nimport GithubFooter from \"../components/GithubFooter\";\nimport ToolBarView from \"./ToolBarView\";\nimport GameButtons from \"./GameButtons\";\n\n\nconst GameView = (props) => {\n\n\n  const [tiles, setTiles] = useState({...props.tiles});\n  useEffect(() => observe((newPos) => {\n    setTiles({...newPos})\n  }, tiles));\n\n  return (\n    <React.Fragment>\n      <GlobalStyles styles={{ ul: { margin: 0, padding: 0, listStyle: 'none', }}} />\n      <CssBaseline />\n\n      <ToolBarView />\n\n      <GameAreaNew tiles={Object.values(tiles)} />\n\n      <GameButtons setTiles={setTiles} tiles={tiles} />\n\n      <GithubFooter sx={{ mt: 5 }} />\n\n    </React.Fragment>\n  )\n}\n\nexport default GameView;","import { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { createTiles, generateRandomLetters } from '../GameState';\nimport GameViewNew from './GameView';\n\nconst AppView = () => {\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <GameViewNew tiles={createTiles(generateRandomLetters())}/>\n    </DndProvider>\n  )\n}\n\nexport default AppView","import {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n} from \"react-router-dom\";\nimport AppView from './views/AppView';\n\nfunction App() {\n\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<AppView />} />\n        <Route path=\"*\" element={<AppView />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nif(module.hot){\n  module.hot.accept()\n}\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}