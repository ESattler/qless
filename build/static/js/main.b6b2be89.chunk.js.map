{"version":3,"sources":["utils.js","GameState.js","constants.js","components/Tile.js","components/BoardSquare.js","components/TileBenchSquare.js","components/TileBench.js","components/GameArea.js","views/GameView.js","App.js","index.js"],"names":["Array","prototype","swap","a","b","this","length","temp","range","n","from","x","i","matrix","y","rows","columns","map","row","slice","letters","observers","emitChange","id","observe","o","tile","moveTile","toX","toY","item","canDropTile","squareX","squareY","allStartingSpot","Object","values","every","nextToExistingLetter","forEach","Math","abs","allTiles","filter","t","getNeighbors","getNeighborsById","up","down","left","right","connectingPiece","resetTile","newTile","getRandomInt","max","floor","random","generateRandomLetters","charAt","upNeighbor","downNeighbor","rightNeighbor","leftNeighbor","tempTile","getWordDown","letter","getWordRight","getAllWords","words","console","log","word","push","ItemTypes","Tile","props","useDrag","type","collect","monitor","isDragging","drag","useDrop","accept","drop","fromID","toID","fromX","fromY","swapTile","isOver","styles","top","zIndex","className","style","ref","node","BoardSquare","canDrop","classes","classNames","TileBenchSquare","TileBench","rowIndex","index","tiles","renderBoardSquares","React","Component","GameArea","GameView","useState","tile1","setTile1","useEffect","newPos","tile2","setTile2","tile3","setTile3","tile4","setTile4","tile5","setTile5","tile6","setTile6","tile7","setTile7","tile8","setTile8","tile9","setTile9","tile10","setTile10","tile11","setTile11","tile12","setTile12","setTiles","foundWords","setFoundWords","foundWordsDivs","ListItem","ListItemText","onClick","newLetters","randomize","some","alert","promises","fetch","Promise","all","then","results","checkedWords","res","status","valid","validate","Typography","variant","gutterBottom","List","App","DndProvider","backend","HTML5Backend","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b6b2be89.chunk.js","sourcesContent":["/**\n * Array.prototype.swap\n * Rearrange an array to swap the positions of two elements.\n * @param {Number} a - the index of the first element to swap.\n * @param {Number} b - the index of the second element to swap.\n * @returns {Array}\n * @example\n * // returns [ 'a', 'c', 'b' ]\n * [ 'a', 'b', 'c' ].swap(1, 2)\n */\n Array.prototype.swap = function (a, b) {\n  if ( b >= this.length || b < 0 ) return this;\n\n  // Temporary variable to hold data while we juggle\n  let temp = this[a];\n  this[a] = this[b];\n  this[b] = temp;\n  return this;\n};\n\n/**\n * Array.range\n * Create a new array of length n, where the elements are numbers\n * from 0 to n - 1.\n * @param {Number} n - the desired length of the range.\n * @returns {Array}\n * @example\n * // returns [ 0, 1, 2, 3 ]\n * Array.range(4);\n */\nArray.range = n => Array.from(new Array(n), (x,i) => i);\n\n/**\n * Array.matrix\n * Create a new two-dimensional array, where each element is its own index.\n * @param {Number} x - the desired number of columns (possible x values)\n * @param {Number} y - the desired number of rows (possible y values)\n * @returns {Array}\n * @example\n * // returns [\n * //   [ 0, 1, 2 ],\n * //   [ 0, 1, 2 ]\n * // ]\n * Array.matrix(3, 2);\n */\nArray.matrix = (x, y) => {\n  const rows = Array.range(y);\n  const columns = Array.range(x);\n  return rows.map( (row, i) => columns.slice() );\n}","const letters = {}\n\nlet observers = {};\n\nfunction emitChange() {\n  for (let id in observers) {\n    observers[id]({...letters[id]})\n  }\n}\n\nexport function observe(o, tile) {\n  observers[tile.id] = o\n  letters[tile.id] = tile\n}\n\nexport function moveTile(toX, toY, item) {\n  letters[item.id] = {\n    ...letters[item.id],\n    x: toX,\n    y: toY,\n  }\n  emitChange();\n}\n\nexport function swapTile(fromID, toID) {\n  let fromX = letters[fromID].x;\n  let fromY = letters[fromID].y;\n\n  let toX = letters[toID].x;\n  let toY = letters[toID].y;\n\n  letters[fromID] = {\n    ...letters[fromID],\n    x: toX,\n    y: toY\n  }\n\n  letters[toID] = {\n    ...letters[toID],\n    x: fromX,\n    y: fromY\n  }\n  emitChange()\n}\n\nexport function canDropTile(squareX, squareY, item) {\n  let allStartingSpot = Object.values(letters).every(tile => tile.y === 0)\n\n  let nextToExistingLetter = false\n  Object.values(letters).forEach(tile => {\n    if (tile.y !== 0 && tile.id !== item.id && ((Math.abs(tile.x - squareX) === 1 &&  Math.abs(tile.y - squareY) === 0) || (Math.abs(tile.y - squareY) === 1 && Math.abs(tile.x - squareX) === 0))) {\n      nextToExistingLetter = true\n    }\n  })\n\n\n  let [tile, up, down, left, right] = getNeighborsById(Object.values(letters), item.id);\n  let connectingPiece = (((up && down) || (left && right)) && tile.y !== 0);\n\n  return (allStartingSpot || nextToExistingLetter) && !connectingPiece\n}\n\nexport function resetTile(id, newTile) {\n    letters[id] = {\n      ...newTile\n    };\n}\n\n/*\n  GENERATE RANDOM LETTERS\n*/\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nexport function generateRandomLetters() {\n  \n  let one = \"CCDTBJ\".charAt(getRandomInt(6))\n  let two = \"XZBNSK\".charAt(getRandomInt(6))\n  let three = \"YMLBML\".charAt(getRandomInt(6))\n  let four = \"ONIOIY\".charAt(getRandomInt(6))\n  let five = \"MCCTTS\".charAt(getRandomInt(6))\n  let six = \"HPTHTW\".charAt(getRandomInt (6))\n  let seven = \"RLLFDW\".charAt(getRandomInt(6))\n  let eight = \"EAOUUI\".charAt(getRandomInt(6))\n  let nine = \"RHNHNR\".charAt(getRandomInt(6))\n  let ten = \"OEAEAO\".charAt(getRandomInt(6))\n  let eleven = \"KPFVPG\".charAt(getRandomInt(6))\n  let twelve = \"GDGRRL\".charAt(getRandomInt (6))\n\n  let letters = [one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve]\n\n  return letters\n}\n\n/*\n  FIND LETTERS IN GRID\n*/\nfunction getNeighborsById(allTiles, id) {\n  let tile = allTiles.filter(t => t.id === id)[0]\n  return [tile, ...getNeighbors(allTiles, tile)]\n}\n\nfunction getNeighbors(allTiles, tile) {\n  let upNeighbor = null;\n  let downNeighbor = null;\n  let rightNeighbor = null;\n  let leftNeighbor = null;\n  allTiles.forEach(tempTile => {\n    \n    if (tempTile.x === tile.x && tempTile.y - tile.y === -1) {\n      upNeighbor = tempTile\n    }\n    \n    if (tempTile.x === tile.x && tempTile.y - tile.y === 1) {\n      downNeighbor = tempTile\n    }\n    \n    if (tempTile.x - tile.x === 1 && tempTile.y  ===tile.y) {\n      rightNeighbor = tempTile\n    }\n    \n    if (tempTile.x - tile.x === -1 && tempTile.y  ===tile.y) {\n      leftNeighbor = tempTile\n    }\n  })\n  return [upNeighbor, downNeighbor, leftNeighbor, rightNeighbor];\n}\n\nfunction getWordDown(allTiles, tile) {\n  const [up, down, left, right] = getNeighbors(allTiles, tile)\n  if (!down) {\n    return tile.letter\n  }\n  return `${tile.letter}${getWordDown(allTiles, down)}`\n}\n\nfunction getWordRight(allTiles, tile) {\n  const [up, down, left, right] = getNeighbors(allTiles, tile)\n  if (!right) {\n    return tile.letter\n  }\n  return `${tile.letter}${getWordRight(allTiles, right)}`\n}\n\n\nexport function getAllWords(allTiles) {\n  let words = []\n  console.log(\"IN GET ALL WORDS\", allTiles)\n\n  allTiles.forEach(tile => {\n    const [up, down, left, right] = getNeighbors(allTiles, tile)\n    //console.log(`Tile ${tile.letter} has: up neighbor ${up?.letter}, down neighbor ${down?.letter}, right neighbor ${right?.letter}, left neighbor ${left?.letter}`)\n\n    if (down && !up) {\n      console.log(`Found starting letter ${tile.letter}, getting word in DOWN direction`)\n      let word = getWordDown(allTiles, tile)\n      words.push(word)\n      console.log(`FOUND WORD ${word}`)\n    }\n\n    if (right && !left) {\n      console.log(`Found starting letter ${tile.letter}, getting word in RIGHT direction`)\n      let word = getWordRight(allTiles, tile)\n      words.push(word)\n      console.log(`FOUND WORD ${word}`)\n    }\n  })\n  return words\n}","export const ItemTypes = {\n  TILE: 'tile'\n}","import React, { useState } from \"react\";\nimport { ItemTypes } from '../constants'\nimport { useDrag, useDrop } from 'react-dnd'\nimport { swapTile } from \"../GameState\";\n\nconst SQUARE_SIZE = 56;\nconst TILE_OFFSET = -10;\n\nconst Tile = (props) => {\n\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: ItemTypes.TILE,\n        item: () => {\n          return {id: props.id}\n        },\n        collect: (monitor) => ({\n            isDragging: !!monitor.isDragging()\n          })\n      }))\n\n    const [{ isOver }, drop] = useDrop(() => ({\n        accept: ItemTypes.TILE,\n        drop: (item, monitor) => {\n          console.log(\"in tile drop\", item, props.id)\n          swapTile(item.id, props.id)\n          //console.log(item)\n          //return {x: x, y: y}\n        },\n        //drop: p => {return {x: props.x, y: props.y} },\n        collect: monitor => ({\n          isOver: !!monitor.isOver(),\n        }),\n      }), [props.x, props.y])\n\n    let x = props.x\n    let y = props.y\n    const styles = {\n      left: x * SQUARE_SIZE - TILE_OFFSET,\n      top: y * SQUARE_SIZE - TILE_OFFSET,\n      zIndex: `${x + 1}${y + 1}`,\n    };\n\n    return (\n        <div className='tile' key={props.id} style={styles} ref={(node) => drag(drop(node))}>\n            <span className=\"tile-letter\">{props.letter}</span>\n        </div>\n    );\n  }\n  \n  export default Tile;","import React from \"react\";\nimport classNames from \"classnames\";\nimport { ItemTypes } from '../constants'\nimport { useDrop } from 'react-dnd'\nimport { canDropTile, moveTile } from \"../GameState\";\n\nconst BoardSquare = (props) => {\n  const [{ isOver, canDrop }, drop] = useDrop(() => ({\n    accept: ItemTypes.TILE,\n    drop: (item, monitor) => {\n      moveTile(props.x, props.y, item)\n    },\n    canDrop: (item) => canDropTile(props.x, props.y, item),\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n      canDrop: !!monitor.canDrop(),\n    }),\n  }), [props.x, props.y])\n\n  const classes = classNames({\n    \"board-square\": true,\n    \"dragged-over\": canDrop,\n    \"cant-drop\": isOver && !canDrop\n  });\n\n  return <div className={classes} ref={drop}/>;\n\n}\n  \n  export default BoardSquare;","import React from \"react\";\nimport classNames from \"classnames\";\nimport { ItemTypes } from '../constants'\nimport { useDrop } from 'react-dnd'\nimport { moveTile } from \"../GameState\";\n\nconst TileBenchSquare = (props) => {\n  const [{ isOver }, drop] = useDrop(() => ({\n    accept: ItemTypes.TILE,\n    drop: (item, monitor) => {\n      console.log(\"Dropped items props\", item)\n      moveTile(props.x, props.y, item)\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n    }),\n  }), [props.x, props.y])\n\n  const classes = classNames({\n    \"tile-bench-square\": true,\n    \"dragged-over\": isOver\n  });\n\n  return <div className={classes} ref={drop}/>;\n\n}\n  \n  export default TileBenchSquare;","import React from \"react\";\nimport Tile from \"./Tile\";\nimport utils from '../utils';\nimport TileBenchSquare from \"./TileBenchSquare\";\n\nconst BOARD_WIDTH = 12;\nconst BOARD_HEIGHT = 1;\n\nclass TileBench extends React.Component {\n\n  renderBoardSquares() {\n    const matrix = Array.matrix(BOARD_WIDTH, BOARD_HEIGHT);\n    return matrix.map((row, rowIndex) =>\n      row.map(index => {\n        return (\n          <TileBenchSquare\n            x={index}\n            y={rowIndex}\n            key={index}\n          />\n        );\n      })\n    );\n  };\n\n  render() {\n    let tiles = []\n    for (let tile of this.props.tiles) {\n      console.log(\"Creating Tile \", tile.letter, tile.x, tile.y)\n      tiles.push(<Tile key={tile.id} {...tile} />)\n    }\n\n    console.log(\"Tile bench\", tiles)\n    return (\n        <div className=\"tile-bench-border\">\n          <div className=\"tile-bench\">\n            {tiles}\n            {this.renderBoardSquares()}\n          </div>\n      </div>\n    );\n  }\n  }\n  \n  export default TileBench;","import React from \"react\";\nimport Tile from \"./Tile\";\nimport BoardSquare from './BoardSquare';\nimport utils from '../utils';\nimport TileBench from \"./TileBench\";\n\nconst BOARD_WIDTH = 10;\nconst BOARD_HEIGHT = 10;\n\nclass GameArea extends React.Component {\n\n  renderBoardSquares() {\n    const matrix = Array.matrix(BOARD_WIDTH, BOARD_HEIGHT);\n    return matrix.map((row, rowIndex) =>\n      row.map(index => {\n        return (\n          <BoardSquare\n            x={index}\n            y={2 + rowIndex}\n            key={index}\n          />\n        );\n      })\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <div id=\"scrabble\">\n          <TileBench tiles={this.props.tiles}/>\n          <div className=\"board-border\">\n            <div className=\"board\">\n              {/* {tiles} */}\n              {this.renderBoardSquares()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  }\n  \n  export default GameArea;","import React, { useState, useEffect } from \"react\";\nimport { getAllWords, observe, resetTile } from \"../GameState\";\nimport GameArea from \"../components/GameArea\"\nimport { generateRandomLetters } from \"../GameState\";\nimport Typography from '@mui/material/Typography';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\n\nfunction randomize(setTiles, setFoundWords) {\n  let newLetters = generateRandomLetters()\n\n  for (let i = 0; i < setTiles.length; i++) {\n    let newTile = {\n      x: i,\n      y: 0,\n      letter: newLetters[i],\n      id: `${i}`\n    }\n\n    setTiles[i](newTile)\n    resetTile(i, newTile)\n    setFoundWords([])\n  }\n}\n\nfunction validate(tiles, setFoundWords) {\n  console.log(tiles)\n  let anyStartingSpot = Object.values(tiles).some(tile => tile.y === 0)\n  if (anyStartingSpot) {\n    alert(\"NOT ALL ON BOARD\")\n    return;\n  }\n\n  const words = getAllWords(tiles)\n  let promises = []\n  words.forEach(word => {\n    promises.push(fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`))\n  })\n  Promise.all(promises).then(results => {\n    let checkedWords = []\n    results.forEach((res, i) => {\n      console.log(res.status)\n      checkedWords.push({\n        word: words[i],\n        valid: res.status === 200\n      })\n    })\n    setFoundWords(checkedWords)\n  })\n  \n \n}\n\nconst GameView = (props) => {\n\n  const [tile1, setTile1] = useState({x: 0, y: 0, letter: props.letters[0], id: \"0\"});\n  useEffect(() => observe((newPos) => setTile1(newPos), tile1));\n\n  const [tile2, setTile2] = useState({x: 1, y: 0, letter: props.letters[1], id: \"1\"});\n  useEffect(() => observe((newPos) => setTile2(newPos), tile2));\n\n  const [tile3, setTile3] = useState({x: 2, y: 0, letter: props.letters[2], id: \"2\"});\n  useEffect(() => observe((newPos) => setTile3(newPos), tile3));\n\n  const [tile4, setTile4] = useState({x: 3, y: 0, letter: props.letters[3], id: \"3\"});\n  useEffect(() => observe((newPos) => setTile4(newPos), tile4));\n\n  const [tile5, setTile5] = useState({x: 4, y: 0, letter: props.letters[4], id: \"4\"});\n  useEffect(() => observe((newPos) => setTile5(newPos), tile5));\n\n  const [tile6, setTile6] = useState({x: 5, y: 0, letter: props.letters[5], id: \"5\"});\n  useEffect(() => observe((newPos) => setTile6(newPos), tile6));\n\n  const [tile7, setTile7] = useState({x: 6, y: 0, letter: props.letters[6], id: \"6\"});\n  useEffect(() => observe((newPos) => setTile7(newPos), tile7));\n\n  const [tile8, setTile8] = useState({x: 7, y: 0, letter: props.letters[7], id: \"7\"});\n  useEffect(() => observe((newPos) => setTile8(newPos), tile8));\n\n  const [tile9, setTile9] = useState({x: 8, y: 0, letter: props.letters[8], id: \"8\"});\n  useEffect(() => observe((newPos) => setTile9(newPos), tile9));\n\n  const [tile10, setTile10] = useState({x: 9, y: 0, letter: props.letters[9], id: \"9\"});\n  useEffect(() => observe((newPos) => setTile10(newPos), tile10));\n\n  const [tile11, setTile11] = useState({x: 10, y: 0, letter: props.letters[10], id: \"10\"});\n  useEffect(() => observe((newPos) => setTile11(newPos), tile11));\n\n  const [tile12, setTile12] = useState({x: 11, y: 0, letter: props.letters[11], id: \"11\"});\n  useEffect(() => observe((newPos) => setTile12(newPos), tile12));\n\n  let tiles = [tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12]\n  let setTiles = [setTile1, setTile2, setTile3, setTile4, setTile5, setTile6, setTile7, setTile8, setTile9, setTile10, setTile11, setTile12]\n\n\n  const [foundWords, setFoundWords] = useState([]);\n\n  let foundWordsDivs = []\n  for (let word of foundWords) {\n    foundWordsDivs.push(\n      <ListItem>\n        <ListItemText>\n          {word.word}\n        </ListItemText>\n      </ListItem>\n    )\n  }\n\n  console.log(\"\\n\\nRerender Game View\")\n  return (\n    <>\n      <div>\n        <GameArea tiles={tiles}/>\n        <button onClick={() => randomize(setTiles, setFoundWords)}> Randomize </button>\n        <button onClick={() => validate(tiles, setFoundWords)}> Validate </button>\n      </div >\n      <div className=\"scrabble\">\n        <div className=\"scoreboard-border\">\n          <div className=\"scoreboard\">\n            <Typography variant=\"h6\" gutterBottom>\n              Q Less\n            </Typography>\n          </div>\n          <List>\n              {foundWordsDivs}\n          </List>\n        </div>\n      </div>\n    </>\n\n  )\n}\n  \n  export default GameView;","import './App.css';\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport GameView from './views/GameView';\nimport { generateRandomLetters } from './GameState';\n\nfunction App() {\n\n  console.log(\"Rerender App\")\n\n  const letters = generateRandomLetters()\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"App\">\n        <GameView letters={letters}/>\n      </div>\n    </DndProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nimport \"./css/main.css\";\nimport \"./css/animate.css\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nif(module.hot){\n  module.hot.accept()\n}\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}